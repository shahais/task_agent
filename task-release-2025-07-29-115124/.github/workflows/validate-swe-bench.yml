name: SWE-bench Data Point Validator with Official API

on:
  pull_request:
    paths:
      - 'data_points/**/*.json'
  push:
    branches: [main]
    paths:
      - 'data_points/**/*.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Увеличен для Docker операций
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential
    
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
    
    - name: Install SWE-bench and dependencies
      run: |
        # Устанавливаем официальный SWE-bench
        uv pip install --system swebench
        
        # Дополнительные зависимости
        uv pip install --system docker requests tqdm
    
    - name: Verify Docker and SWE-bench setup
      run: |
        docker --version
        docker ps
        python -c "import swebench; print(f'SWE-bench {swebench.__version__} готов')"
        python -c "from swebench.harness.run_evaluation import main; print('API доступен')"
        echo "Настройка завершена ✅"
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          data_points/**/*.json
    
    - name: Quick Structure Validation
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "🔍 Быстрая структурная проверка измененных файлов:"
        echo "${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Сначала только структурная проверка (быстро)
        python validator.py --no-evaluation --verbose ${{ steps.changed-files.outputs.all_changed_files }}
        
        echo "✅ Структурная проверка пройдена"
    
    - name: Official SWE-bench Evaluation
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "🚀 Запуск ОФИЦИАЛЬНОГО SWE-bench evaluation с Docker:"
        echo "⚠️  Это может занять до 30 минут (Docker + установка зависимостей)..."
        
        # Создаем список файлов
        FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Запускаем валидатор с официальным SWE-bench API
        echo "Файлы для валидации: $FILES"
        
        # Увеличиваем таймаут для Docker операций
        python validator.py --verbose --timeout 3600 $FILES
        
        VALIDATION_EXIT_CODE=$?
        
        if [ $VALIDATION_EXIT_CODE -eq 0 ]; then
          echo "✅ ВСЕ data points прошли официальную SWE-bench evaluation!"
        else
          echo "❌ Некоторые data points НЕ ПРОШЛИ официальную SWE-bench evaluation"
          exit 1
        fi
    
    - name: Generate Validation Report
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "📊 Генерация детального отчета валидации:"
        
        FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Генерируем JSON отчет
        python validator.py --json --verbose $FILES > validation_report.json
        
        echo "📋 Краткий отчет:"
        python -c "
        import json
        with open('validation_report.json') as f:
            results = json.load(f)
        
        print(f'Всего файлов: {len(results)}')
        
        valid_count = sum(1 for r in results if r['valid'])
        print(f'Валидных: {valid_count}/{len(results)}')
        
        for result in results:
            file_name = result['file']
            status = '✅ VALID' if result['valid'] else '❌ INVALID'
            print(f'{status}: {file_name}')
            
            if result.get('swe_bench_evaluation'):
                swe = result['swe_bench_evaluation']
                if swe.get('patch_applied'):
                    print(f'  🔧 Патч применен: ✅')
                else:
                    print(f'  🔧 Патч применен: ❌')
                
                if swe.get('tests_passed'):
                    print(f'  🧪 Тесты пройдены: ✅')
                else:
                    print(f'  🧪 Тесты пройдены: ❌')
                
                fail_to_pass = swe.get('fail_to_pass_results', {})
                if fail_to_pass:
                    passed = sum(1 for r in fail_to_pass.values() if r['passed'])
                    total = len(fail_to_pass)
                    emoji = '✅' if passed == total else '❌'
                    print(f'  📈 FAIL_TO_PASS: {passed}/{total} {emoji}')
                
                pass_to_pass = swe.get('pass_to_pass_results', {})
                if pass_to_pass:
                    passed = sum(1 for r in pass_to_pass.values() if r['passed'])
                    total = len(pass_to_pass)
                    emoji = '✅' if passed == total else '❌'
                    print(f'  📊 PASS_TO_PASS: {passed}/{total} {emoji}')
        "
        
        echo ""
        echo "🎉 Использовался ОФИЦИАЛЬНЫЙ SWE-bench evaluation harness!"
        echo "🐳 Docker контейнеры создавались автоматически"
        echo "📦 Зависимости устанавливались в изолированных средах"
